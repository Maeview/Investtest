<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coin Kursverfolgung</title>
    <style>
        .chart-container {
            width: 800px;
            height: 400px;
        }
        .info-box {
            border: 1px solid black;
            padding: 10px;
            margin-top: 10px;
        }
        .investment-item {
            margin: 5px 0;
        }
        .crypto {
            margin-bottom: 20px;
        }
        #search-result {
            margin-top: 20px;
        }
        #suggestions {
            margin-top: 10px;
            border: 1px solid #ccc;
            max-height: 150px;
            overflow-y: auto;
        }
        .suggestion {
            padding: 5px;
            cursor: pointer;
        }
        .suggestion:hover {
            background-color: #f0f0f0;
        }
    </style>
</head>
<body>
    <h1>Coin Kursverfolgung</h1>
    <div id="coin-selection">
        <h3>Wähle einen Coin oder erstelle einen neuen</h3>
        <input type="text" id="search-coin" placeholder="Coin suchen" onkeyup="searchCoin()">
        <select id="coin-list" onchange="loadCoinData()">
            <option value="">--Wähle einen Coin--</option>
        </select>
        <input type="text" id="new-coin-name" placeholder="Neuen Coin Namen eingeben">
        <button onclick="createNewCoin()">Erstellen</button>
        <button onclick="deleteCoin()">Coin löschen</button>
        <button onclick="exportData()">Daten exportieren</button>
        <input type="file" id="import-file" onchange="importData(event)">
        <button onclick="document.getElementById('import-file').click()">Daten importieren</button>
        <button onclick="sortCoins('alphabetical')">Alphabetisch sortieren</button>
        <button onclick="sortCoins('volume')">Nach Volumen sortieren</button>
        <button onclick="sortCoins('recent')">Zuletzt hinzugefügt sortieren</button>
    </div>
    <div id="coin-data" style="display: none;">
        <h2 id="coin-title"></h2>
        <div class="chart-container">
            <canvas id="chart"></canvas>
        </div>
        <div class="info-box">
            <p id="cost-average">Cost Average: $0.00000</p>
            <p id="coin-count">Coins: 0.00000</p>
            <p id="total-invested">Gesamtinvestition: $0.00000</p>
            <p id="profit-loss">Gewinn/Verlust: $0.00000</p>
        </div>
        <input type="number" id="current-price" placeholder="Aktueller Kurs" step="0.01">
        <button onclick="updateChart()">Aktualisieren</button>
        <input type="number" id="invest-amount" placeholder="Investitionsbetrag" step="0.01">
        <button onclick="addInvestment()">Hinzufügen</button>
        <input type="number" id="fee-amount" placeholder="Gebührenbetrag" step="0.01">
        <button onclick="addFee()">Gebühren Hinzufügen</button>
        <button onclick="subtractFee()">Gebühren Abziehen</button>
        <div id="investment-list">
            <h3>Investitionen:</h3>
            <ul id="investments"></ul>
        </div>
        <h3>Verknüpfe einen Coin</h3>
        <input type="text" id="linked-coin-input" placeholder="Coin-ID eingeben (z.B. btc-bitcoin)" oninput="showSuggestions()">
        <div id="suggestions"></div>
        <button onclick="linkCoin()">Verknüpfen</button>
        <button onclick="unlinkCoin()">Verknüpfung lösen</button>
        <label>
            <input type="checkbox" id="toggle-linked-coin" onchange="toggleLinkedCoin()"> Verknüpften Coin verwenden
        </label>
    </div>
    <div id="total-investment">
        <h3>Gesamtinvestition: $<span id="total-investment-value">0.00000</span></h3>
        <label>
            <input type="checkbox" id="toggle-total-profit-loss" onchange="toggleTotalProfitLoss()"> Gesamtgewinn/Verlust anzeigen
        </label>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let coins = JSON.parse(localStorage.getItem('coins')) || {};
        let currentCoin = '';
        let investments = [];
        let totalCoins = 0;
        let totalInvested = 0;
        let totalFees = 0;
        let allCoins = [];
        let linkedCoin = '';
        let useLinkedCoin = false;
        let showTotalProfitLoss = false;

        async function fetchAllCoins() {
            const response = await fetch('https://api.coinpaprika.com/v1/coins');
            allCoins = await response.json();
        }

        async function fetchCryptoPrice(cryptoId, elementId) {
            try {
                const response = await fetch(`https://api.coinpaprika.com/v1/tickers/${cryptoId}`);
                const data = await response.json();
                const price = data.quotes.USD.price.toFixed(9);
                document.getElementById(elementId).innerText = `${cryptoId.toUpperCase()}: $${price}`;
                return price;
            } catch (error) {
                document.getElementById(elementId).innerText = `Fehler beim Abrufen des Preises für ${cryptoId}`;
                return null;
            }
        }

        function loadCoinData() {
            currentCoin = document.getElementById('coin-list').value;
            if (currentCoin) {
                document.getElementById('coin-data').style.display = 'block';
                document.getElementById('coin-title').innerText = currentCoin;
                investments = coins[currentCoin].investments || [];
                totalFees = coins[currentCoin].totalFees || 0;
                linkedCoin = coins[currentCoin].linkedCoin || '';
                useLinkedCoin = coins[currentCoin].useLinkedCoin || false;
                document.getElementById('linked-coin-input').value = linkedCoin;
                document.getElementById('toggle-linked-coin').checked = useLinkedCoin;
                calculateTotals();
                renderInvestments();
                updateProfitLoss();
                updateChart();
            } else {
                document.getElementById('coin-data').style.display = 'none';
            }
        }

        function createNewCoin() {
            const newCoinName = document.getElementById('new-coin-name').value;
            if (newCoinName && !coins[newCoinName]) {
                coins[newCoinName] = { investments: [], totalFees: 0, createdAt: new Date().toISOString() };
                saveCoins();
                loadCoinSelection();
                document.getElementById('new-coin-name').value = '';
            }
        }

        function deleteCoin() {
            if (currentCoin && coins[currentCoin]) {
                if (confirm(`Möchten Sie den Coin "${currentCoin}" wirklich löschen?`)) {
                    delete coins[currentCoin];
                    saveCoins();
                    loadCoinSelection();
                    document.getElementById('coin-data').style.display = 'none';
                    currentCoin = '';
                }
            }
        }

        function saveCoins() {
            localStorage.setItem('coins', JSON.stringify(coins));
            updateTotalInvestment();
        }

        function loadCoinSelection() {
            const coinList = document.getElementById('coin-list');
            coinList.innerHTML = '<option value="">--Wähle einen Coin--</option>';
            for (let coin in coins) {
                const option = document.createElement('option');
                option.value = coin;
                option.innerText = coin;
                coinList.appendChild(option);
            }
        }

        function searchCoin() {
            const searchValue = document.getElementById('search-coin').value.toLowerCase();
            const coinList = document.getElementById('coin-list');
            coinList.innerHTML = '<option value="">--Wähle einen Coin--</option>';
            for (let coin in coins) {
                if (coin.toLowerCase().includes(searchValue)) {
                    const option = document.createElement('option');
                    option.value = coin;
                    option.innerText = coin;
                    coinList.appendChild(option);
                }
            }
        }

        function sortCoins(criteria) {
            const coinArray = Object.keys(coins).map(coin => ({ name: coin, ...coins[coin] }));
            if (criteria === 'alphabetical') {
                coinArray.sort((a, b) => a.name.localeCompare(b.name));
            } else if (criteria === 'volume') {
                                coinArray.sort((a, b) => b.investments.reduce((sum, inv) => sum + inv.amount, 0) - a.investments.reduce((sum, inv) => sum + inv.amount, 0));
            } else if (criteria === 'recent') {
                coinArray.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
            }
            const coinList = document.getElementById('coin-list');
            coinList.innerHTML = '<option value="">--Wähle einen Coin--</option>';
            coinArray.forEach(coin => {
                const option = document.createElement('option');
                option.value = coin.name;
                option.innerText = coin.name;
                coinList.appendChild(option);
            });
        }

        function showSuggestions() {
            const input = document.getElementById('linked-coin-input').value.toLowerCase();
            const suggestions = allCoins.filter(coin => coin.id.includes(input));
            const suggestionsContainer = document.getElementById('suggestions');
            suggestionsContainer.innerHTML = '';
            suggestions.forEach(suggestion => {
                const div = document.createElement('div');
                div.className = 'suggestion';
                div.innerText = suggestion.id;
                div.onclick = () => {
                    document.getElementById('linked-coin-input').value = suggestion.id;
                    suggestionsContainer.innerHTML = '';
                };
                suggestionsContainer.appendChild(div);
            });
        }

        function linkCoin() {
            const linkedCoinId = document.getElementById('linked-coin-input').value.trim();
            if (linkedCoinId) {
                linkedCoin = linkedCoinId;
                coins[currentCoin].linkedCoin = linkedCoin;
                saveCoins();
            }
        }

        function unlinkCoin() {
            linkedCoin = '';
            coins[currentCoin].linkedCoin = '';
            saveCoins();
            document.getElementById('linked-coin-input').value = '';
        }

        function toggleLinkedCoin() {
            useLinkedCoin = document.getElementById('toggle-linked-coin').checked;
            coins[currentCoin].useLinkedCoin = useLinkedCoin;
            saveCoins();
            updateChart();
        }

        function toggleTotalProfitLoss() {
            showTotalProfitLoss = document.getElementById('toggle-total-profit-loss').checked;
            updateTotalInvestment();
        }

        window.onload = function() {
            loadCoinSelection();
            updateTotalInvestment();
            fetchAllCoins();
        };

        const ctx = document.getElementById('chart').getContext('2d');
        const chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Coin Kurs',
                    data: [],
                    borderColor: 'blue',
                    fill: false
                }, {
                    label: 'Cost Average',
                    data: [],
                    borderColor: 'red',
                    borderDash: [10, 5],
                    fill: false
                }]
            },
            options: {
                scales: {
                    x: {
                        type: 'linear',
                        position: 'bottom',
                        title: {
                            display: true,
                            text: 'Anzahl der Trades'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Preis des Coins'
                        }
                    }
                }
            }
        });

        async function updateChart() {
            const currentPrice = parseFloat(document.getElementById('current-price').value);
            if (useLinkedCoin && linkedCoin) {
                const linkedPrice = await fetchCryptoPrice(linkedCoin, 'current-price');
                if (linkedPrice) {
                    chart.data.labels.push(chart.data.labels.length + 1);
                    chart.data.datasets[0].data.push(parseFloat(linkedPrice));
                    const costAverage = totalInvested / totalCoins || 0;
                    chart.data.datasets[1].data.push(costAverage);
                    document.getElementById('cost-average').innerText = `Cost Average: $${costAverage.toFixed(9)}`;
                    updateProfitLoss();
                    chart.update();
                }
            } else if (!isNaN(currentPrice)) {
                chart.data.labels.push(chart.data.labels.length + 1);
                chart.data.datasets[0].data.push(currentPrice);
                const costAverage = totalInvested / totalCoins || 0;
                chart.data.datasets[1].data.push(costAverage);
                document.getElementById('cost-average').innerText = `Cost Average: $${costAverage.toFixed(9)}`;
                updateProfitLoss();
                chart.update();
            }
        }

        function addInvestment() {
            const investAmount = parseFloat(document.getElementById('invest-amount').value);
            const currentPrice = parseFloat(document.getElementById('current-price').value);
            if (isNaN(investAmount) || isNaN(currentPrice)) return;
            const coinsBought = investAmount / currentPrice;
            totalCoins += coinsBought;
            totalInvested += investAmount;
            investments.push({ amount: investAmount, price: currentPrice, coins: coinsBought });
            coins[currentCoin].investments = investments;
            saveCoins();
            renderInvestments();
            updateChart();
            document.getElementById('coin-count').innerText = `Coins: ${totalCoins.toFixed(9)}`;
            document.getElementById('total-invested').innerText = `Gesamtinvestition: $${totalInvested.toFixed(9)}`;
            document.getElementById('current-price').value = (totalInvested / totalCoins).toFixed(9);
        }

        function deleteInvestment(index) {
            if (confirm(`Möchten Sie diese Investition wirklich löschen?`)) {
                const investment = investments[index];
                totalCoins -= investment.coins;
                totalInvested -= investment.amount;
                investments.splice(index, 1);
                coins[currentCoin].investments = investments;
                saveCoins();
                renderInvestments();
                updateChart();
            }
        }

        function renderInvestments() {
            const investmentsList = document.getElementById('investments');
            investmentsList.innerHTML = '';
            investments.forEach((investment, index) => {
                const li = document.createElement('li');
                li.classList.add('investment-item');
                li.innerHTML = `Investition ${index + 1}: $${investment.amount.toFixed(9)} bei $${investment.price.toFixed(9)} pro Coin (${investment.coins.toFixed(9)} Coins) <button onclick="deleteInvestment(${index})">Löschen</button>`;
                investmentsList.appendChild(li);
            });
        }

        function calculateTotals() {
            totalCoins = 0;
            totalInvested = 0;
            investments.forEach(investment => {
                totalCoins += investment.coins;
                totalInvested += investment.amount;
            });
            document.getElementById('coin-count').innerText = `Coins: ${totalCoins.toFixed(9)}`;
            const costAverage = totalCoins ? (totalInvested / totalCoins) : 0;
            document.getElementById('cost-average').innerText = `Cost Average: $${costAverage.toFixed(9)}`;
            document.getElementById('total-invested').innerText = `Gesamtinvestition: $${totalInvested.toFixed(9)}`;
            document.getElementById('current-price').value = costAverage.toFixed(9);
        }

        function addFee() {
            const feeAmount = parseFloat(document.getElementById('fee-amount').value);
            if (isNaN(feeAmount)) return;
            totalFees += feeAmount;
            coins[currentCoin].totalFees = totalFees;
            saveCoins();
            updateProfitLoss();
        }

        function subtractFee() {
            const feeAmount = parseFloat(document.getElementById('fee-amount').value);
            if (isNaN(feeAmount)) return;
            totalFees -= feeAmount;
            coins[currentCoin].totalFees = totalFees;
            saveCoins();
            updateProfitLoss();
        }

        function updateProfitLoss() {
            const currentPrice = parseFloat(document.getElementById('current-price').value);
            const costAverage = totalInvested / totalCoins || 0;
            const profitLoss = ((currentPrice - costAverage) * totalCoins - totalFees).toFixed(9);
            document.getElementById('profit-loss').innerText = `Gewinn/Verlust: $${profitLoss}`;
        }

        function exportData() {
            const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(coins));
            const downloadAnchorNode = document.createElement('a');
            downloadAnchorNode.setAttribute("href", dataStr);
            downloadAnchorNode.setAttribute("download", "coins_data.json");
            document.body.appendChild(downloadAnchorNode);
            downloadAnchorNode.click();
            downloadAnchorNode.remove();
        }

        function importData(event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function(e) {
                const importedData = JSON.parse(e.target.result);
                coins = importedData;
                saveCoins();
                loadCoinSelection();
                updateTotalInvestment();
            };
            reader.readAsText(file);
        }

        function updateTotalInvestment() {
            let totalInvestment = 0;
            for (let coin in coins) {
                totalInvestment += coins[coin].investments.reduce((sum, inv) => sum + inv.amount, 0);
            }
            document.getElementById('total-investment-value').innerText = totalInvestment.toFixed(9);
                        if (showTotalProfitLoss) {
                let totalProfitLoss = 0;
                for (let coin in coins) {
                    const coinData = coins[coin];
                    const currentPrice = parseFloat(document.getElementById('current-price').value);
                    const costAverage = coinData.investments.reduce((sum, inv) => sum + inv.amount, 0) / coinData.investments.reduce((sum, inv) => sum + inv.coins, 0) || 0;
                    totalProfitLoss += ((currentPrice - costAverage) * coinData.investments.reduce((sum, inv) => sum + inv.coins, 0) - coinData.totalFees);
                }
                document.getElementById('total-investment-value').innerText += ` (Gewinn/Verlust: $${totalProfitLoss.toFixed(9)})`;
            }
        }
    </script>
</body>
</html>
